/**
 * @fileoverview Firestore Security Rules for Krisha Enterprise platform.
 *
 * Core Philosophy:
 * This ruleset implements a strict, path-based ownership model for user data,
 * with an additional admin role.  User data is segregated into user-specific
 * subcollections where possible.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/agreements/{agreementId}: Agreements owned by the user.
 * - /users/{userId}/documents/{documentId}: Documents owned by the user.
 * - /calculator_form_submissions/{submissionId}: Calculator form submissions (admin-only).
 * - /roles_admin/{userId}: Admin role assignments.
 *
 * Key Security Decisions:
 * - User data is strictly segregated and owned by the respective user.
 * - Only admins can access calculator form submissions.
 * - `list` operations are only permitted for owners of user subcollections.
 * - No public data exposure by default.
 *
 * Denormalization for Authorization:
 *  - The security model relies on path-based ownership and admin role checks
 *    to avoid costly `get()` calls. No explicit denormalization is needed.
 *
 * Structural Segregation:
 * - User-owned data is stored in user-specific subcollections to provide a
 *   clear security boundary.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the request is made by the owner of an existing resource.
      * @param {string} userId The user ID to check against.
      * @return {boolean} True if the user ID matches the authenticated user's ID and the resource exists, false otherwise.
      */
     function isExistingOwner(userId) {
       return isOwner(userId) && resource != null;
     }

    /**
     * @description Checks if the requesting user has admin privileges.
     * @return {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User A can create their own profile.
     * @allow (get) User A can get their own profile.
     * @allow (update) User A can update their own profile.
     * @allow (delete) User A can delete their own profile.
     * @allow (get) An admin can get any user profile.
     * @allow (update) An admin can update any user profile.
     * @deny (create) User A cannot create a profile for User B.
     * @deny (get) User A cannot get User B's profile unless they are an admin.
     * @deny (update) User A cannot update User B's profile unless they are an admin.
     * @deny (delete) User A cannot delete User B's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for agreements owned by a user.
     * @path /users/{userId}/agreements/{agreementId}
     * @allow (create) User A can create an agreement under their profile.
     * @allow (get) User A can get an agreement under their profile.
     * @allow (update) User A can update an agreement under their profile.
     * @allow (delete) User A can delete an agreement under their profile.
     * @deny (create) User A cannot create an agreement under User B's profile.
     * @deny (get) User A cannot get an agreement under User B's profile.
     * @deny (update) User A cannot update an agreement under User B's profile.
     * @deny (delete) User A cannot delete an agreement under User B's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/agreements/{agreementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for documents owned by a user.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User A can create a document under their profile.
     * @allow (get) User A can get a document under their profile.
     * @allow (update) User A can update a document under their profile.
     * @allow (delete) User A can delete a document under their profile.
     * @deny (create) User A cannot create a document under User B's profile.
     * @deny (get) User A cannot get a document under User B's profile.
     * @deny (update) User A cannot update a document under User B's profile.
     * @deny (delete) User A cannot delete a document under User B's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/documents/{documentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for calculator form submissions.
     * @path /calculator_form_submissions/{submissionId}
     * @allow (get) Admins can read calculator form submissions.
     * @allow (create) Admins can create calculator form submissions.
     * @allow (update) Admins can update calculator form submissions.
     * @allow (delete) Admins can delete calculator form submissions.
     * @deny (list) Non-admins cannot list calculator form submissions.
     * @deny (get) Non-admins cannot read calculator form submissions.
     * @deny (create) Non-admins cannot create calculator form submissions.
     * @deny (update) Non-admins cannot update calculator form submissions.
     * @deny (delete) Non-admins cannot delete calculator form submissions.
     * @principle Restricts access to calculator form submissions to admins only.
     */
    match /calculator_form_submissions/{submissionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

        /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) Only the function itself can create the record
     * @allow (get) Any authenticated user
     * @principle User documents are private unless the user has admin privileges.
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}