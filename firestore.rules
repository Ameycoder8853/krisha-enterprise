/**
 * @file Firebase Security Rules for Krisha Enterprise platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, agreements, and documents.
 * Calculator form submissions are restricted to administrators.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves or an admin.
 * - /users/{userId}/agreements/{agreementId}: Agreements created by a specific user, accessible only to that user or an admin.
 * - /users/{userId}/documents/{documentId}: Documents uploaded by a specific user, accessible only to that user or an admin.
 * - /calculator_form_submissions/{submissionId}: Calculator form submissions, accessible only to admins.
 * - /roles_admin/{userId}: Documents indicating admin roles; existence grants admin privileges.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the user or an admin.
 * - Agreements and documents are also private and user-owned.
 * - Calculator submissions are only visible to admins.
 * - Listing of user documents and agreements is allowed only for the owning user.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the existence of a document in the /roles_admin/{userId} collection.  This avoids needing to store the admin role in the user document.
 *
 * Structural Segregation:
 * - User-owned data (agreements, documents) is stored in subcollections under the user's profile, ensuring private access by default.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces read and write access to user profiles only to the user themselves or an admin.
     * @path /users/{userId}
     * @allow (get, update, delete) User with ID 'user123' can access their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (get, update, delete) User with ID 'user456' cannot access User with ID 'user123' profile.
     * @principle Enforces document ownership and admin override for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource.data.id == userId;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource != null;
    }

    /**
     * @description Enforces read and write access to agreements only to the owning user or an admin.
     * @path /users/{userId}/agreements/{agreementId}
     * @allow (get, update, delete) User with ID 'user123' can access their own agreement.
     * @allow (create) User with ID 'user123' can create an agreement under their profile.
     * @deny (get, update, delete) User with ID 'user456' cannot access User with ID 'user123' agreement.
     * @principle Enforces document ownership and admin override for agreements.
     */
    match /users/{userId}/agreements/{agreementId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource != null;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource != null;
    }

    /**
     * @description Enforces read and write access to documents only to the owning user or an admin.
     * @path /users/{userId}/documents/{documentId}
     * @allow (get, update, delete) User with ID 'user123' can access their own document.
     * @allow (create) User with ID 'user123' can create a document under their profile.
     * @deny (get, update, delete) User with ID 'user456' cannot access User with ID 'user123' document.
     * @principle Enforces document ownership and admin override for documents.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource != null;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource != null;
    }

    /**
     * @description Restricts read and write access to calculator form submissions to admins only.
     * @path /calculator_form_submissions/{submissionId}
     * @allow (get, update, delete) Admin user can access calculator form submissions.
     * @deny (get, update, delete) Non-admin user cannot access calculator form submissions.
     * @principle Restricts access to calculator form submissions to authorized admins.
     */
    match /calculator_form_submissions/{submissionId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Controls access to the admin role documents.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin();
    }

  }

  function isSignedIn() {
    return request.auth != null;
  }
}