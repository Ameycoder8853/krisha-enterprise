rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (read) User 'test_user' can read their own profile.
     * @allow (create) User 'test_user' can create their own profile.
     * @allow (update) User 'test_user' can update their own profile.
     * @allow (delete) User 'test_user' can delete their own profile.
     * @deny (read) User 'other_user' cannot read 'test_user' profile.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for agreements under a user.
     * @path /users/{userId}/agreements/{agreementId}
     * @allow (read) User 'test_user' can read their own agreement.
     * @allow (create) User 'test_user' can create an agreement under their profile.
     * @allow (update) User 'test_user' can update their own agreement.
     * @allow (delete) User 'test_user' can delete their own agreement.
     * @deny (read) User 'other_user' cannot read an agreement under 'test_user' profile.
     * @deny (create) An unauthenticated user cannot create an agreement.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/agreements/{agreementId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for documents under a user.
     * @path /users/{userId}/documents/{documentId}
     * @allow (read) User 'test_user' can read their own document.
     * @allow (create) User 'test_user' can create a document under their profile.
     * @allow (update) User 'test_user' can update their own document.
     * @allow (delete) User 'test_user' can delete their own document.
     * @deny (read) User 'other_user' cannot read a document under 'test_user' profile.
     * @deny (create) An unauthenticated user cannot create a document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/documents/{documentId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for calculator form submissions.
     * @path /calculator_form_submissions/{submissionId}
     * @allow (read) An admin user can read a form submission.
     * @allow (create) An admin user can create a form submission.
     * @allow (update) An admin user can update a form submission.
     * @allow (delete) An admin user can delete a form submission.
     * @deny (read) A non-admin user cannot read a form submission.
     * @deny (create) A non-admin user cannot create a form submission.
     * @principle Restricts access to a sensitive collection to admins only.
     */
    match /calculator_form_submissions/{submissionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls the creation of admin roles. Only a privileged process can create these.
     * @path /roles_admin/{userId}
     * @allow (create) Allows a user to be marked as an admin.
     * @deny (create) An unauthenticated user cannot create a role.
     *
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin() || isOwner(userId);
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}