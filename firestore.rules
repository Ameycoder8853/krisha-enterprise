/**
 * @file Firestore Security Rules for Krisha Enterprise Platform
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data and restricts administrative data to authorized personnel. It leverages path-based authorization and role-based access control to ensure data security.
 * @data_structure Data is organized hierarchically, with user-specific data nested under `/users/{userId}` and administrative data stored in the top-level collection `/calculator_form_submissions`.
 * @key_security_decisions User listing is disallowed for privacy. Admin roles are managed via the `roles_admin` collection. Data validation is minimal to allow for rapid prototyping, focusing on ownership and relational integrity only.
 * @denormalization_for_authorization None. Path-based rules are used to enforce authorization.
 * @structural_segregation User-owned data is segregated into per-user subcollections (e.g., `/users/{userId}/agreements/{agreementId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile (if userId matches auth.uid).
     * @allow (get, update, delete) Signed-in user can access their own profile (if userId matches auth.uid).
     * @deny (create, get, update, delete) Signed-in user cannot access other user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Controls access to agreements created by a user.
     * @path /users/{userId}/agreements/{agreementId}
     * @allow (create) Signed-in user can create agreements under their own user ID.
     * @allow (get, update, delete) Signed-in user can access agreements under their own user ID.
     * @deny (create, get, update, delete) Signed-in user cannot access agreements under other user IDs.
     * @principle Enforces path-based ownership and relational integrity.
     */
    match /users/{userId}/agreements/{agreementId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Controls access to documents uploaded by a user.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) Signed-in user can create documents under their own user ID.
     * @allow (get, update, delete) Signed-in user can access documents under their own user ID.
     * @deny (create, get, update, delete) Signed-in user cannot access documents under other user IDs.
     * @principle Enforces path-based ownership.
     */
    match /users/{userId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Controls access to calculator form submissions.
     * @path /calculator_form_submissions/{submissionId}
     * @allow (get, list) Only admins can read form submissions.
     * @deny (create, update, delete) Non-admins cannot modify form submissions.
     * @principle Restricts access to admin roles.
     */
    match /calculator_form_submissions/{submissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Manages admin roles. Existence of a document grants admin access.
     * @path /roles_admin/{userId}
     * @allow (create) A user can create their own admin role entry.
     * @allow (get) Admins can verify their own role.
     * @deny (create, get, update, delete) Non-admins cannot manage admin roles.
     * @principle Enforces admin-only access.
     */
    match /roles_admin/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}